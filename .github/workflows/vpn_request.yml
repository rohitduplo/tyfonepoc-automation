name: VPN Request Workflow

on:
  repository_dispatch:
    types: [vpn_request]

jobs:
  vpn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Extract VPN Request Data
        run: |
          echo "Extracting data from GitHub event..."
          
          # Extract JSON from payload
          EXTRA_DATA_JSON='${{ github.event.client_payload.extra_data }}'
          echo "Extracted JSON: $EXTRA_DATA_JSON"

          # Extract variables
          ipv4_cidr=$(echo "$EXTRA_DATA_JSON" | jq -r '.ipv4_cidr')
          customer_name="${{ github.event.client_payload.customer_name }}"
          integrity_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.integrity_phase2')
          dh_group_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.dh_group_phase2')
          life_time_renegotiation=$(echo "$EXTRA_DATA_JSON" | jq -r '.life_time_renegotiation')
          ike_version_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.ike_version_phase2')
          customer_gateway_ip=$(echo "$EXTRA_DATA_JSON" | jq -r '.customer_gateway_ip')
          others=$(echo "$EXTRA_DATA_JSON" | jq -r '.others')
          contact_person=$(echo "$EXTRA_DATA_JSON" | jq -r '.contact_person')
          contact_person_email=$(echo "$EXTRA_DATA_JSON" | jq -r '.contact_person_email')
          firewall_vendor=$(echo "$EXTRA_DATA_JSON" | jq -r '.firewall_vendor')
          device_details=$(echo "$EXTRA_DATA_JSON" | jq -r '.device_details')
          firewall_version=$(echo "$EXTRA_DATA_JSON" | jq -r '.firewall_version')
          vpn_routing="${{ github.event.client_payload.vpn_routing }}"
          asn="${{ github.event.client_payload.asn }}"
          encryption_phase1="${{ github.event.client_payload.encryption_phase1 }}"
          encryption_phase2="${{ github.event.client_payload.encryption_phase2 }}"
          integrity_phase1="${{ github.event.client_payload.integrity_phase1 }}"
          dh_group_phase1="${{ github.event.client_payload.dh_group_phase1 }}"
          lifetime_phase1="${{ github.event.client_payload.lifetime_phase1 }}"
          ike_version_phase1="${{ github.event.client_payload.ike_version_phase1 }}"

          echo "CIDR: $ipv4_cidr"
          echo "customer_name: $customer_name"
          echo "integrity_phase2: $integrity_phase2"
          echo "dh_group_phase2: $dh_group_phase2"
          echo "life_time_renegotiation: $life_time_renegotiation"
          echo "ike_version_phase2: $ike_version_phase2"
          echo "customer_gateway_ip: $customer_gateway_ip"
          echo "others: $others"
          echo "contact_person: $contact_person"
          echo "contact_person_email: $contact_person_email"
          echo "firewall_vendor: $firewall_vendor"
          echo "device_details: $device_details"
          echo "firewall_version: $firewall_version"
          echo "vpn_routing: $vpn_routing"
          echo "ASN: $asn"
          echo "encryption_phase1: $encryption_phase1"
          echo "encryption_phase2: $encryption_phase2"
          echo "integrity_phase1: $integrity_phase1"
          echo "dh_group_phase1: $dh_group_phase1"
          echo "lifetime_phase1: $lifetime_phase1"
          echo "ike_version_phase1: $ike_version_phase1"

          # Export values for next steps
          echo "IPV4_CIDR=$ipv4_cidr" >> $GITHUB_ENV
          echo "customer_name=$customer_name" >> $GITHUB_ENV
          echo "integrity_phase2: $integrity_phase2" >> $GITHUB_ENV
          echo "dh_group_phase2: $dh_group_phase2" >> $GITHUB_ENV
          echo "life_time_renegotiation: $life_time_renegotiation" >> $GITHUB_ENV
          echo "ike_version_phase2: $ike_version_phase2" >> $GITHUB_ENV
          echo "customer_gateway_ip: $customer_gateway_ip" >> $GITHUB_ENV
          echo "others: $others" >> $GITHUB_ENV
          echo "contact_person: $contact_person" >> $GITHUB_ENV
          echo "contact_person_email: $contact_person_email" >> $GITHUB_ENV
          echo "firewall_vendor: $firewall_vendor" >> $GITHUB_ENV
          echo "device_details: $device_details" >> $GITHUB_ENV
          echo "firewall_version: $firewall_version" >> $GITHUB_ENV
          echo "vpn_routing: $vpn_routing" >> $GITHUB_ENV
          echo "ASN: $asn" >> $GITHUB_ENV
          echo "encryption_phase1: $encryption_phase1" >> $GITHUB_ENV
          echo "encryption_phase2: $encryption_phase2" >> $GITHUB_ENV
          echo "integrity_phase1: $integrity_phase1" >> $GITHUB_ENV
          echo "dh_group_phase1: $dh_group_phase1" >> $GITHUB_ENV
          echo "lifetime_phase1: $lifetime_phase1" >> $GITHUB_ENV
          echo "ike_version_phase1: $ike_version_phase1" >> $GITHUB_ENV

          ######Terraform Vars###########
          echo "TF_VAR_customer_name=${{ github.event.client_payload.customer_name }}" >> $GITHUB_ENV
          echo "TF_VAR_ipv4_cidr=$ipv4_cidr" >> $GITHUB_ENV
          echo "TF_VAR_integrity_phase2=$integrity_phase2" >> $GITHUB_ENV
          echo "TF_VAR_dh_group_phase2=$dh_group_phase2" >> $GITHUB_ENV
          echo "TF_VAR_life_time_renegotiation=$life_time_renegotiation" >> $GITHUB_ENV
          echo "TF_VAR_ike_version_phase2=$ike_version_phase2" >> $GITHUB_ENV
          echo "TF_VAR_customer_gateway_ip=$customer_gateway_ip" >> $GITHUB_ENV
          echo "TF_VAR_vpn_routing=${{ github.event.client_payload.vpn_routing }}" >> $GITHUB_ENV
          echo "TF_VAR_asn=${{ github.event.client_payload.asn }}" >> $GITHUB_ENV
          echo "TF_VAR_encryption_phase1=${{ github.event.client_payload.encryption_phase1 }}" >> $GITHUB_ENV
          echo "TF_VAR_encryption_phase2=${{ github.event.client_payload.encryption_phase2 }}" >> $GITHUB_ENV
          echo "TF_VAR_integrity_phase1=${{ github.event.client_payload.integrity_phase1 }}" >> $GITHUB_ENV
          echo "TF_VAR_dh_group_phase1=${{ github.event.client_payload.dh_group_phase1 }}" >> $GITHUB_ENV
          echo "TF_VAR_lifetime_phase1=${{ github.event.client_payload.lifetime_phase1 }}" >> $GITHUB_ENV
          echo "TF_VAR_ike_version_phase1=${{ github.event.client_payload.ike_version_phase1 }}" >> $GITHUB_ENV


          #####echo command for terraform#####
          echo "TF_VAR_customer_name=$TF_VAR_customer_name"
          echo "TF_VAR_ipv4_cidr=$TF_VAR_ipv4_cidr"
          echo "TF_VAR_integrity_phase2=$TF_VAR_integrity_phase2"
          echo "TF_VAR_dh_group_phase2=$TF_VAR_dh_group_phase2"
          echo "TF_VAR_life_time_renegotiation=$TF_VAR_life_time_renegotiation"
          echo "TF_VAR_ike_version_phase2=$TF_VAR_ike_version_phase2"
          echo "TF_VAR_customer_gateway_ip=$TF_VAR_customer_gateway_ip"
          echo "TF_VAR_vpn_routing=$TF_VAR_vpn_routing"
          echo "TF_VAR_asn=$TF_VAR_asn"
          echo "TF_VAR_encryption_phase1=$TF_VAR_encryption_phase1"
          echo "TF_VAR_encryption_phase2=$TF_VAR_encryption_phase2"
          echo "TF_VAR_integrity_phase1=$TF_VAR_integrity_phase1"
          echo "TF_VAR_dh_group_phase1=$TF_VAR_dh_group_phase1"
          echo "TF_VAR_lifetime_phase1=$TF_VAR_lifetime_phase1"
          echo "TF_VAR_ike_version_phase1=$TF_VAR_life_time_renegotiation"


      - name: Install Dependencies
        run: pip install boto3

      - name: Run CIDR Overlap Check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          SNS_TOPIC_ARN: "arn:aws:sns:us-east-1:590184024707:tyfone-poc"
        run: python check_cidr.py
      - name: Trigger Terraform (if no overlap)
        if: steps.cidr_check.outputs.overlap == 'false'
        run: |
          echo "No CIDR overlap detected. Proceeding with Terraform deployment..."
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
