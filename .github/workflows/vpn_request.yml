name: VPN Request Workflow

on:
  repository_dispatch:
    types: [vpn_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Verify Terraform Installation
        run: terraform --version

  extract_data:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Extract VPN Request Data
        run: |
          echo "Extracting data from GitHub event..."
          EXTRA_DATA_JSON='${{ github.event.client_payload.extra_data }}'
          echo "Extracted JSON: $EXTRA_DATA_JSON"

          ipv4_cidr=$(echo "$EXTRA_DATA_JSON" | jq -r '.ipv4_cidr')
          customer_name="${{ github.event.client_payload.customer_name }}"
          integrity_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.integrity_phase2')
          dh_group_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.dh_group_phase2')
          life_time_renegotiation=$(echo "$EXTRA_DATA_JSON" | jq -r '.life_time_renegotiation')
          ike_version_phase2=$(echo "$EXTRA_DATA_JSON" | jq -r '.ike_version_phase2')
          customer_gateway_ip=$(echo "$EXTRA_DATA_JSON" | jq -r '.customer_gateway_ip')
          vpn_routing="${{ github.event.client_payload.vpn_routing }}"
          asn="${{ github.event.client_payload.asn }}"

          echo "IPV4_CIDR=$ipv4_cidr" >> "$GITHUB_ENV"
          echo "customer_name=$customer_name" >> "$GITHUB_ENV"
          echo "integrity_phase2=$integrity_phase2" >> "$GITHUB_ENV"
          echo "dh_group_phase2=$dh_group_phase2" >> "$GITHUB_ENV"
          echo "life_time_renegotiation=$life_time_renegotiation" >> "$GITHUB_ENV"
          echo "ike_version_phase2=$ike_version_phase2" >> "$GITHUB_ENV"
          echo "customer_gateway_ip=$customer_gateway_ip" >> "$GITHUB_ENV"
          echo "vpn_routing=$vpn_routing" >> "$GITHUB_ENV"
          echo "asn=$asn" >> "$GITHUB_ENV"

  check_cidr:
    runs-on: ubuntu-latest
    needs: extract_data
    outputs:
      overlap: ${{ steps.check.outputs.overlap }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install boto3

      - name: Run CIDR Overlap Check
        id: check
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          SNS_TOPIC_ARN: "arn:aws:sns:us-east-1:590184024707:tyfone-poc"
        run: |
          if [ ! -f check_cidr.py ]; then
            echo "Error: check_cidr.py not found!"
            exit 1
          fi
          output=$(python check_cidr.py)
          echo "$output"
          if echo "$output" | grep -q "overlap=false"; then
            echo "overlap=false" >> "$GITHUB_ENV"
            echo "::set-output name=overlap::false"
          else
            echo "overlap=true" >> "$GITHUB_ENV"
            echo "::set-output name=overlap::true"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: check_cidr
    if: needs.check_cidr.outputs.overlap == 'false'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Trigger Terraform (if no overlap)
        run: |
          echo "No CIDR overlap detected. Proceeding with Terraform deployment..."
          terraform init -backend-config="key=${customer_name}.tfstate"
          terraform plan
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          TF_VAR_transit_gateway_id: ${{ secrets.TF_VAR_transit_gateway_id }}
          TF_VAR_transit_gateway_route_table_id: ${{ secrets.TF_VAR_transit_gateway_route_table_id }}
